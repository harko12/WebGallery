// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebGallery.Data;

namespace WebGallery.Migrations.Gallery
{
    [DbContext(typeof(GalleryDbContext))]
    [Migration("20200926060614_imagegallerymodels")]
    partial class imagegallerymodels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebGallery.Models.GalleryUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AspNetId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("GalleryUsers");
                });

            modelBuilder.Entity("WebGallery.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DateMonthString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DateString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DateYearString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Filename")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ImageGalleryID")
                        .HasColumnType("int");

                    b.Property<bool>("Limbo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("ImageGalleryID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebGallery.Models.ImageCaption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ImageCaptions");
                });

            modelBuilder.Entity("WebGallery.Models.ImageGallery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("ImageGalleries");
                });

            modelBuilder.Entity("WebGallery.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TaggedImagesImageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TaggedImagesImageID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("WebGallery.Models.TaggedImages", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("ImageID");

                    b.ToTable("TaggedImages");
                });

            modelBuilder.Entity("WebGallery.Models.Image", b =>
                {
                    b.HasOne("WebGallery.Models.ImageGallery", null)
                        .WithMany("ImageList")
                        .HasForeignKey("ImageGalleryID");
                });

            modelBuilder.Entity("WebGallery.Models.Tag", b =>
                {
                    b.HasOne("WebGallery.Models.TaggedImages", null)
                        .WithMany("Tags")
                        .HasForeignKey("TaggedImagesImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
